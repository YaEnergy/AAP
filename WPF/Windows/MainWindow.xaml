<Window x:Name="window" x:Class="AAP.UI.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AAP.UI.Windows"
        mc:Ignorable="d"
        Title="ASCII Art Program - {Art Info Text Here}" Height="450" Width="800" WindowState="Maximized"
    xmlns:System="clr-namespace:System;assembly=System.Runtime" xmlns:aap="clr-namespace:AAP" xmlns:ui="clr-namespace:AAP.UI" xmlns:viewmodels="clr-namespace:AAP.UI.ViewModels" xmlns:controls="clr-namespace:AAP.UI.Controls" xmlns:themes="clr-namespace:AAP.UI.Themes" d:DataContext="{d:DesignInstance Type=viewmodels:MainWindowViewModel}" MinWidth="600" MinHeight="450">
    <Window.DataContext>
        <viewmodels:MainWindowViewModel x:Name="MainWindowViewModel"/>
    </Window.DataContext>
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Styles/CheckBoxStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <DockPanel Background="{DynamicResource DarkAccent}">
            <DockPanel.DataContext>
                <viewmodels:ArtFileViewModel x:Name="ArtFileViewModel"/>
            </DockPanel.DataContext>
            <ToolBarTray VerticalAlignment="Top" DockPanel.Dock="Top" >
                <ToolBar ClipToBounds="True" >
                    <Menu>
                        <MenuItem Header="{Binding FileMenuContent}">
                            <MenuItem Header="{Binding NewFileContent}" InputGestureText="Ctrl+N" Command="{Binding NewFileCommand}"></MenuItem>
                            <MenuItem Header="{Binding OpenFileContent}" InputGestureText="Ctrl+O" Command="{Binding OpenFileCommand}"></MenuItem>
                            <MenuItem Header="{Binding SaveFileContent}" InputGestureText="Ctrl+S" IsEnabled="{Binding HasArtOpen}" Command="{Binding SaveFileCommand}"></MenuItem>
                            <MenuItem Header="{Binding SaveAsFileContent}" InputGestureText="Shift+Ctrl+S" IsEnabled="{Binding HasArtOpen}" Command="{Binding SaveAsFileCommand}"></MenuItem>
                            <MenuItem Header="{Binding ExportFileContent}" InputGestureText="Ctrl+E" IsEnabled="{Binding HasArtOpen}" Command="{Binding ExportFileCommand}"></MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="{Binding CopyArtToClipboardContent}" InputGestureText="Shift+Ctrl+C" IsEnabled="{Binding HasArtOpen}" Command="{Binding CopyArtToClipboardCommand}"></MenuItem>
                            <MenuItem Header="{Binding ImportLayerContent}" InputGestureText="Shift+Ctrl+O" IsEnabled="{Binding HasArtOpen}" Command="{Binding ImportFileCommand}"></MenuItem>
                            <MenuItem Header="{Binding EditFileContent}" IsEnabled="{Binding HasArtOpen}" Command="{Binding EditFileCommand}"/>
                            <Separator></Separator>
                            <MenuItem Header="{Binding AboutMenuContent, ElementName=MainWindowViewModel}" Command="{Binding OpenAboutCommand, ElementName=MainWindowViewModel}"/>
                            <MenuItem Header="{Binding SettingsMenuContent, ElementName=MainWindowViewModel}" Command="{Binding OpenSettingsCommand, ElementName=MainWindowViewModel}"/>
                            <Separator></Separator>
                            <MenuItem Header="{Binding ExitContent, ElementName=MainWindowViewModel}" InputGestureText="Alt+F4" Command="{Binding ExitCommand, ElementName=MainWindowViewModel}"></MenuItem>
                        </MenuItem>
                        <MenuItem Header="{Binding EditMenuContent}" IsEnabled="{Binding HasArtOpen}">
                            <MenuItem Header="{Binding UndoContent}" InputGestureText="Ctrl+Z" Command="{Binding UndoCommand}"></MenuItem>
                            <MenuItem Header="{Binding RedoContent}" InputGestureText="Ctrl+Y" Command="{Binding RedoCommand}"></MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="{Binding CutSelectionContent}" InputGestureText="Ctrl+X" IsEnabled="{Binding HasSelected}" Command="{Binding CutCommand}"></MenuItem>
                            <MenuItem Header="{Binding CopySelectionContent}" InputGestureText="Ctrl+C" IsEnabled="{Binding HasSelected}" Command="{Binding CopyCommand}"></MenuItem>
                            <MenuItem Header="{Binding PasteLayerContent}" InputGestureText="Ctrl+V" Command="{Binding PasteCommand}"></MenuItem>
                            <MenuItem Header="{Binding DeleteSelectionContent}" InputGestureText="Del" IsEnabled="{Binding HasSelected}" Command="{Binding DeleteSelectedCommand}"></MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="{Binding SelectCanvasContent}" InputGestureText="Ctrl+A" Command="{Binding SelectCanvasCommand}"></MenuItem>
                            <MenuItem Header="{Binding SelectLayerContent}" InputGestureText="Alt+Ctrl+A" Command="{Binding SelectLayerCommand}"></MenuItem>
                            <MenuItem Header="{Binding CancelSelectionContent}" IsEnabled="{Binding HasSelected}" InputGestureText="Shift+Ctrl+A" Command="{Binding CancelSelectionCommand}"></MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="{Binding CropCanvasContent}" IsEnabled="{Binding HasSelected}" InputGestureText="Ctrl+Enter" Command="{Binding CropArtCommand}"></MenuItem>
                            <MenuItem Header="{Binding CropLayerContent}" IsEnabled="{Binding HasSelected}" InputGestureText="Shift+Ctrl+Enter" Command="{Binding CropLayerCommand}"></MenuItem>
                            <Separator></Separator>
                            <MenuItem Header="{Binding FitAllLayersContent}" Command="{Binding FitAllLayersWithinArtCommand}"></MenuItem>
                        </MenuItem>
                        <MenuItem Header="{Binding ViewMenuContent, ElementName=MainWindowViewModel}">
                            <CheckBox Content="{Binding DarkModeContent, ElementName=MainWindowViewModel}" IsChecked="{Binding IsDarkModeOn, ElementName=MainWindowViewModel}" Style="{DynamicResource MenuCheckbox}"></CheckBox>
                            <MenuItem Header="{Binding ToolboxContent, ElementName=MainWindowViewModel}">
                                <CheckBox Content="{Binding VisibilityCheckboxContent, ElementName=MainWindowViewModel}" IsChecked="{Binding IsToolboxVisible, ElementName=MainWindowViewModel}" Style="{DynamicResource MenuCheckbox}"></CheckBox>
                            </MenuItem>
                            <MenuItem Header="{Binding CanvasContent, ElementName=MainWindowViewModel}">
                                <MenuItem HeaderStringFormat="Canvas Text Size: {0}" Header="{Binding TextSize, ElementName=ArtCanvasViewModel}"/>
                                <MenuItem Header="Enlarge text size" Command="{Binding EnlargeTextSizeCommand, ElementName=ArtCanvasViewModel}" InputGestureText="Alt+I"/>
                                <MenuItem Header="Shrink text size" Command="{Binding ShrinkTextSizeCommand, ElementName=ArtCanvasViewModel}" InputGestureText="Alt+O"></MenuItem>
                                <MenuItem Header="Reset text zize" Command="{Binding ResetTextSizeCommand, ElementName=ArtCanvasViewModel}" InputGestureText="Alt+P"></MenuItem>
                                <Separator></Separator>
                                <MenuItem Header="{Binding HighlightThickness, ElementName=ArtCanvasViewModel}" HeaderStringFormat="Highlight Thickness: {0}"></MenuItem>
                                <MenuItem Header="Increase thickness" Command="{Binding IncreaseHighlightThicknessCommand, ElementName=ArtCanvasViewModel}"></MenuItem>
                                <MenuItem Header="Decrease thickness" Command="{Binding DecreaseHighlightThicknessCommand, ElementName=ArtCanvasViewModel}"></MenuItem>
                                <MenuItem Header="Reset thickness" Command="{Binding ResetHighlightThicknessCommand, ElementName=ArtCanvasViewModel}"></MenuItem>
                                <Separator></Separator>
                                <CheckBox Content="Show Grid" IsChecked="{Binding ShowGrid, ElementName=ArtCanvasViewModel}" Style="{DynamicResource MenuCheckbox}"></CheckBox>
                            </MenuItem>
                            <MenuItem Header="{Binding LayerManagementContent, ElementName=MainWindowViewModel}">
                                <CheckBox Content="{Binding VisibilityCheckboxContent, ElementName=MainWindowViewModel}" IsChecked="{Binding IsLayerManagementVisible, ElementName=MainWindowViewModel}" Style="{DynamicResource MenuCheckbox}"></CheckBox>
                            </MenuItem>
                        </MenuItem>
                        <MenuItem Header="{Binding FiltersMenuContent, ElementName=MainWindowViewModel}">
                            <MenuItem Header="{Binding NoFiltersContent, ElementName=MainWindowViewModel}"></MenuItem>
                        </MenuItem>
                        <MenuItem Header="{Binding DrawMenuContent}" Visibility="{Binding IsCharacterOptionVisible, Converter={StaticResource BooleanToVisibilityConverter},ElementName=ToolOptionsViewModel}">
                            <MenuItem Header="{Binding FillSelectionContent}" IsEnabled="{Binding HasSelected}" Command="{Binding FillSelectionCommand}" InputGestureText="Alt+F"></MenuItem>
                        </MenuItem>
                    </Menu>
                </ToolBar>
            </ToolBarTray>
            <DockPanel HorizontalAlignment="Left" Margin="0,0,0,0" Width="200" ClipToBounds="True" Visibility="{Binding IsToolboxVisible, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=MainWindowViewModel}">
                <Grid x:Name="ToolBox" VerticalAlignment="Top" Height="150" Background="{DynamicResource LightAccent}" DockPanel.Dock="Top" Margin="0,0,0,5">
                    <Grid.DataContext>
                        <viewmodels:ToolSelectionViewModel x:Name="ToolSelectionViewModel"/>
                    </Grid.DataContext>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <controls:ImageStateBox x:Name="DrawToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" AllowManualDisable="False" StateCommand="{Binding SetDrawToolCommand}" Style="{DynamicResource ResourceKey=Tool_Pencil}"/>
                    <controls:ImageStateBox x:Name="EraserToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Column="1" Style="{DynamicResource ResourceKey=Tool_Eraser}" AllowManualDisable="False" StateCommand="{Binding SetEraserToolCommand}"/>
                    <controls:ImageStateBox x:Name="SelectToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Column="2" Style="{DynamicResource ResourceKey=Tool_Select}" AllowManualDisable="False" StateCommand="{Binding SetSelectToolCommand}"/>
                    <controls:ImageStateBox x:Name="MoveToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Column ="3" Grid.Row="0" Style="{DynamicResource ResourceKey=Tool_Move}" AllowManualDisable="False" StateCommand="{Binding SetMoveToolCommand}"/>
                    <controls:ImageStateBox x:Name="LineToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Row="1" Grid.Column="0" Style="{DynamicResource ResourceKey=Tool_Line}" AllowManualDisable="False" StateCommand="{Binding SetLineToolCommand}"/>
                    <controls:ImageStateBox x:Name="BucketToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Row="1" Grid.Column="1" Style="{DynamicResource ResourceKey=Tool_Bucket}" AllowManualDisable="False" StateCommand="{Binding SetBucketToolCommand}"/>
                    <controls:ImageStateBox x:Name="TextToolStateBox" Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Grid.Row="1" Grid.Column="2" Style="{DynamicResource ResourceKey=Tool_Text}" AllowManualDisable="False" StateCommand="{Binding SetTextToolCommand}"/>
                </Grid>
                <Rectangle HorizontalAlignment="Stretch" Margin="2" Stroke="{DynamicResource Border}" DockPanel.Dock="Top"/>
                <ScrollViewer DockPanel.Dock="Top" VerticalScrollBarVisibility="Auto" Margin="0,5,0,0">
                    <ScrollViewer.DataContext>
                        <viewmodels:ToolOptionsViewModel x:Name="ToolOptionsViewModel"/>
                    </ScrollViewer.DataContext>
                    <StackPanel>
                        <DockPanel Visibility="{Binding IsCharacterOptionVisible, ElementName=ToolOptionsViewModel, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DockPanel.DataContext>
                                <viewmodels:CharacterPaletteSelectionViewModel x:Name="CharacterPaletteSelectionViewModel"/>
                            </DockPanel.DataContext>
                            <DockPanel DockPanel.Dock="Top">
                                <Label Content="{Binding PaletteContent}" HorizontalAlignment="Left"/>
                                <ComboBox Height="25" SelectedItem="{Binding SelectedPalette}" ItemsSource="{Binding Palettes}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <WrapPanel>
                                                <TextBlock Text="{Binding Name}"/>
                                            </WrapPanel>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                            </DockPanel>
                            <Grid DockPanel.Dock="Bottom" Height="40" VerticalAlignment="Top" Background="{DynamicResource LightAccent}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <controls:ImageButton Margin="2,2,2,2" Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource Plus_Button}" Command="{Binding NewPaletteCommand}"/>
                                <controls:ImageButton Margin="2,2,2,2" Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource PaletteEdit_Button}" Grid.Column="1" Command="{Binding EditPaletteCommand}"/>
                                <controls:ImageButton Margin="2,2,2,2" Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource Remove_Button}" Grid.Column="2" Command="{Binding RemovePaletteCommand}"/>
                            </Grid>
                            <controls:CharacterPaletteCharacterSelect VerticalAlignment="Top" GridItemSize="45,45" MaxHeight="400" Margin="0,0,0,0" SelectedCharacter="{Binding SelectedCharacter, Mode=TwoWay}" Characters="{Binding SelectedPalette.Characters, Mode=OneWay}" StateBoxTypeface="{Binding CanvasTypeface, ElementName=ArtCanvasViewModel}" DockPanel.Dock="Top" Width="200"/>
                        </DockPanel>
                        <Rectangle HorizontalAlignment="Stretch" Margin="2" Stroke="{DynamicResource Border}" DockPanel.Dock="Top" Visibility="{Binding IsCharacterOptionVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        <WrapPanel Background="{DynamicResource LightAccent}" Visibility="{Binding IsSizeOptionVisible,Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Label Content="{Binding SizeContent}" Height="30" Margin="5,0,0,0"></Label>
                            <Slider Width="100" Margin="5,5,5,5" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Minimum="1" Value="{Binding Size}" Maximum="16"/>
                            <Label Content="{Binding Size}"/>
                        </WrapPanel>
                        <WrapPanel Background="{DynamicResource LightAccent}" Visibility="{Binding IsEightDirectionalOptionVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <CheckBox Content="{Binding EightDirectionalContent}" HorizontalAlignment="Left" Padding="5,0,5,0" Margin="5,5,5,5" Style="{StaticResource ContentLeftCheckBoxStyle}" IsChecked="{Binding EightDirectional}" Foreground="{DynamicResource Text}"/>
                        </WrapPanel>
                        <WrapPanel Background="{DynamicResource LightAccent}" Visibility="{Binding IsStayInsideSelectionOptionVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <CheckBox Content="{Binding StayInsideSelectionContent}" HorizontalAlignment="Left" Padding="5,0,5,0" Margin="5,5,5,5" Style="{StaticResource ContentLeftCheckBoxStyle}" IsChecked="{Binding StayInsideSelection}" Foreground="{DynamicResource Text}"/>
                        </WrapPanel>
                    </StackPanel>
                </ScrollViewer>
            </DockPanel>
            <Rectangle VerticalAlignment="Stretch" Width="1" Margin="2" Stroke="{DynamicResource Border}" Visibility="{Binding IsToolboxVisible, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=MainWindowViewModel}"/>
            <DockPanel Margin="0,0,0,0" Width="200" ClipToBounds="True" HorizontalAlignment="Right" DockPanel.Dock="Right" Visibility="{Binding IsLayerManagementVisible, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=MainWindowViewModel}">
                <DockPanel.DataContext>
                    <viewmodels:LayerManagementViewModel x:Name="LayerManagementViewModel"/>
                </DockPanel.DataContext>
                <Grid DockPanel.Dock="Bottom" Height="45" VerticalAlignment="Top" Background="{DynamicResource LightAccent}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <controls:ImageButton Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource Plus_Button}" Command="{Binding CreateNewLayerCommand}"/>
                    <controls:ImageButton Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource UpArrow_Button}" Grid.Column="1" Command="{Binding MoveLayerUpCommand}"/>
                    <controls:ImageButton Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource DownArrow_Button}" Grid.Column="2" Command="{Binding MoveLayerDownCommand}"/>
                    <controls:ImageButton Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource Duplicate_Button}" Grid.Column="3" Command="{Binding DuplicateLayerCommand}"/>
                    <controls:ImageButton Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource Merge_Button}" Grid.Column="4" Command="{Binding MergeLayerCommand}"/>
                    <controls:ImageButton Margin="2,2,2,2" Height="{Binding ActualWidth, Mode=OneWay, RelativeSource={RelativeSource Self}}" Style="{DynamicResource Remove_Button}" Grid.Column="5" Command="{Binding RemoveLayerCommand}"/>
                </Grid>
                <StackPanel VerticalAlignment="Top" Background="{DynamicResource LightAccent}" DockPanel.Dock="Top" MaxHeight="500" Visibility="{Binding HasSelectedLayer, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Label Content="{Binding LayerOptionsContent}" FontSize="14" Height="30" Margin="0,5,0,0"/>
                    <WrapPanel Margin="5,0,5,5">
                        <Label Content="{Binding LayerNameContent}" HorizontalAlignment="Left"/>
                        <TextBox TextWrapping="Wrap" Margin="5,3,3,3" Text="{Binding SelectedLayerName, Mode=TwoWay}" UndoLimit="0" MaxHeight="100" MinWidth="100" HorizontalAlignment="Left" MaxWidth="140"/>
                    </WrapPanel>
                    <CheckBox Content="{Binding LayerVisibilityContent}" IsChecked="{Binding SelectedLayerVisibility, Mode=TwoWay}" HorizontalAlignment="Left" Padding="5,0,5,0" Margin="5,0,0,5" Style="{StaticResource ContentLeftCheckBoxStyle}" Foreground="{DynamicResource Text}"/>
                </StackPanel>
                <Rectangle HorizontalAlignment="Stretch" Margin="2" Stroke="{DynamicResource Border}" DockPanel.Dock="Top" Visibility="{Binding HasSelectedLayer,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <ListBox VerticalContentAlignment="Top" DockPanel.Dock="Top" FontSize="14" SelectedIndex="{Binding SelectedLayerID, Mode=TwoWay}" ItemsSource="{Binding Layers}" VerticalAlignment="Top">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <WrapPanel>
                                <TextBlock Text="{Binding Name}"/>
                            </WrapPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </DockPanel>
            <Rectangle VerticalAlignment="Stretch" Width="1" Margin="2" Stroke="{DynamicResource Border}" DockPanel.Dock="Right" Visibility="{Binding IsLayerManagementVisible, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=MainWindowViewModel}"/>
            <DockPanel DockPanel.Dock="Bottom" VerticalAlignment="Bottom" Visibility="{Binding IsBackgroundTaskVisible, ElementName=MainWindowViewModel, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Label HorizontalAlignment="Left" Margin="5,5,5,5" Content="{Binding CurrentBackgroundTaskToken.Name, ElementName=MainWindowViewModel, FallbackValue=BackgroundTaskName}" Padding="5,5,5,5" Grid.IsSharedSizeScope="True"/>
                <ProgressBar IsIndeterminate="{Binding CurrentBackgroundTaskToken.IsDeterminate}" HorizontalContentAlignment="Stretch" Value="{Binding CurrentBackgroundTaskToken.ProgressPercentage,ElementName=MainWindowViewModel}" Margin="5,5,5,5"/>
            </DockPanel>
            <Rectangle HorizontalAlignment="Stretch" Margin="2" Stroke="{DynamicResource Border}" DockPanel.Dock="Bottom" Visibility="{Binding IsBackgroundTaskVisible, ElementName=MainWindowViewModel, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            <DockPanel>
                <DockPanel.DataContext>
                    <viewmodels:ArtCanvasViewModel x:Name="ArtCanvasViewModel"/>
                </DockPanel.DataContext>
                <TabControl DockPanel.Dock="Top" ItemsSource="{Binding OpenArtFiles, ElementName=ArtFileViewModel}" SelectedItem="{Binding CurrentArtFile, ElementName=ArtFileViewModel}" SelectedValue="{Binding CurrentArtFile, ElementName=ArtFileViewModel}" Background="{DynamicResource Background}" BorderBrush="{DynamicResource Border}" Foreground="{DynamicResource Text}">
                    <TabControl.ContentTemplate>
                        <DataTemplate>
                            <ScrollViewer Margin="0,0,0,0" ClipToBounds="True" ScrollViewer.HorizontalScrollBarVisibility="Auto" PanningMode="Both" VerticalScrollBarVisibility="Auto" Background="{DynamicResource LightAccent}" Focusable="False">
                                <controls:ASCIIArtCanvasVisual Margin="450,450,450,450" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" DisplayArt="{Binding Art}" DisplayArtDraw="{Binding ArtDraw}" SelectionHighlightRect="{Binding Selected, ElementName=ArtCanvasViewModel}" TextSize="{Binding TextSize, ElementName=ArtCanvasViewModel}" Tool="{Binding CurrentTool, ElementName=ArtCanvasViewModel}" CanUseTool="{Binding CanUseTool, ElementName=ArtCanvasViewModel}" HighlightRectThickness="{Binding HighlightThickness, ElementName=ArtCanvasViewModel}" DisplayLayer="{Binding SelectedLayer, ElementName=ArtCanvasViewModel}" Background="{DynamicResource Canvas}" Text="{DynamicResource Text}" Border="{DynamicResource Border}" Grid="{DynamicResource DarkAccent}" Focusable="True" AutomationProperties.IsOffscreenBehavior="Onscreen" ShowGrid="{Binding ShowGrid, ElementName=ArtCanvasViewModel}" ArtFont="{Binding CanvasTypeface, ElementName=ArtCanvasViewModel}"/>
                            </ScrollViewer>
                        </DataTemplate>
                    </TabControl.ContentTemplate>
                    <TabControl.ItemTemplate>
                        <DataTemplate>
                            <WrapPanel>
                                <TextBlock Text="{Binding FileName, FallbackValue=*.*}"/>
                                <TextBlock Text="*" Visibility="{Binding UnsavedChanges, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <TextBlock Text=" - "/>
                                <TextBlock Text="{Binding Art.Width, FallbackValue=*}"/>
                                <TextBlock Text="x"/>
                                <TextBlock Text="{Binding Art.Height, FallbackValue=*}"/>
                                <Button Content="X" Margin="5,0,5,0" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" FontSize="9" Command="{Binding CloseOpenFileCommand, ElementName=ArtFileViewModel}" CommandParameter="{Binding Mode=OneWay}"/>
                            </WrapPanel>
                        </DataTemplate>
                    </TabControl.ItemTemplate>
                </TabControl>
            </DockPanel>
        </DockPanel>
    </Grid>
</Window>
